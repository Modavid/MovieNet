using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.CommandWpf;
using MovieNetWPF.WCFMovieService;
using MovieNetWPF.WCFNoteService;
using MovieNetWPF.WCFUserService;

namespace MovieNetWPF
{
	public class MainViewModel : ViewModelBase
	{
		private MovieServiceClient msc = new MovieServiceClient();
		private NoteServiceClient nsc = new NoteServiceClient();
		private UserServiceClient usc = new UserServiceClient();
		LoginWindow loginView;
		MainWindow mainView;
		public MainViewModel()
		{
			Movies = msc.GetAllMoviesAsync().Result.ToList(); //initialization of list of movies
			UpdateMovie = new RelayCommand(UpdateMovieExecute, UpdateMovieCanExecute); // Binding update movie to button
			AddNote = new RelayCommand(AddNoteExecute, AddNoteCanExecute); // binding to add note button
			Login = new RelayCommand(LoginExecute, LoginCanExecute); // binding to login
			Register = new RelayCommand(RegisterExecute, RegisterCanExecute); // binding to register

			isVisible = "Visible";
			Note = new Note();
			//IsLogged();
		}
		private Movie currentMovie;
		public Movie CurrentMovie
		{
			get
			{
				return currentMovie;
			}
			set
			{
				currentMovie = value;
				RaisePropertyChanged();
				RefreshNotes();
			}
		}
		private List<Movie> movies;
		public List<Movie> Movies
		{
			get
			{
				return movies;
			}
			set
			{
				movies = value;
				RaisePropertyChanged();
			}
		}

		private List<Note> notes;

		public List<Note> Notes
		{
			get
			{
				return notes;
			}
			set
			{
				notes = value;
				RaisePropertyChanged();
			}
		}

		private void RefreshNotes()
		{
			Notes = nsc.FindNotesOfMovieAsync(CurrentMovie.Id).Result.ToList();
		}


		public RelayCommand UpdateMovie { get; }

		void UpdateMovieExecute()
		{
			Movie mov = msc.UpdateMovieAsync(this.CurrentMovie.Id, this.CurrentMovie.Title, this.CurrentMovie.Genre, this.CurrentMovie.Summary).Result;
		}

		bool UpdateMovieCanExecute()
		{
			return currentMovie != null;
		}

		private User currentUser;
		public User CurrentUser
		{
			get
			{
				return currentUser;
			}
			set
			{
				currentUser = value;
				RaisePropertyChanged();
			}
		}

		private String logLogin;
		public String LogLogin
		{
			get
			{
				 return logLogin;
			}
			set
			{
				logLogin = value;
				RaisePropertyChanged();
			}
		}

		private String logPassword;
		public String LogPassword
		{
			get
			{
				return logPassword;
			}
			set
			{
				logPassword = value;
				RaisePropertyChanged();
			}
		}

		private String isVisible;
		public String IsVisible
		{
			get
			{
				return isVisible;
			}
			set
			{
				isVisible = value;
				RaisePropertyChanged();
			}
		}

		public RelayCommand Login { get; }

		void LoginExecute()
		{
			IsVisible = "Hidden";
			usc.LoginUser(LogLogin, LogPassword);

			mainView = new MainWindow
			{
				DataContext = this,
			};
			mainView.Show();

		}

		private bool LoginCanExecute()
		{
			return LogPassword != null && LogLogin != null;
		}

		public void IsLogged()
		{
			App.Current.MainWindow
		}

		private String regLogin;
		public String RegLogin
		{
			get
			{
				return regLogin;
			}
			set
			{
				regLogin = value;
				RaisePropertyChanged();
			}
		}

		private String regPassword;
		public String RegPassword
		{
			get
			{
				return regPassword;
			}
			set
			{
				regPassword = value;
				RaisePropertyChanged();
			}
		}

		public RelayCommand Register { get; }

		void RegisterExecute()
		{
			usc.CreateUser(RegLogin,RegPassword);

		}

		bool RegisterCanExecute()
		{
			return RegPassword != null && RegLogin != null;
		}

		private int rating;
		public int Rating
		{
			get
			{
				return rating;
			}
			set
			{
				rating = value;
				Note.Rating = rating;
				RaisePropertyChanged();
			}
		}

		private String comment;
		public String Comment
		{
			get
			{
				return comment;
			}
			set
			{
				comment = value;
				Note.Comment = comment;
				RaisePropertyChanged();
			}
		}
		private Note note;
		public Note Note
		{
			get
			{
				return note;
			}
			set
			{
				note = value;
				RaisePropertyChanged();
			}
		}

		void ClearNote()
		{
			Note = new Note();
		}

		public RelayCommand AddNote { get; }

		void AddNoteExecute()
		{
			nsc.CreateNote(Note.Rating, Note.Comment, CurrentUser.Id, CurrentMovie.Id);
			RefreshNotes();
		}

		bool AddNoteCanExecute()
		{
			return Comment != null && Enumerable.Range(0,21).Contains(Rating) && currentMovie != null;
		}
	}
}
