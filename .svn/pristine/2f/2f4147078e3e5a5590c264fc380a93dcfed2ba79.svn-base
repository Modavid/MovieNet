using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.CommandWpf;
using MovieNetWPF.WCFMovieService;
using MovieNetWPF.WCFNoteService;
using MovieNetWPF.WCFUserService;

namespace MovieNetWPF
{
	public class MainViewModel : ViewModelBase
	{
		private MovieServiceClient msc = new MovieServiceClient();
		private NoteServiceClient nsc = new NoteServiceClient();
		private UserServiceClient usc = new UserServiceClient();
		LoginWindow loginView;
		MainWindow mainView;
		Window currentView;
		public MainViewModel()
		{
			RefreshMovies(); // init of movies list
			UpdateMovie = new RelayCommand(UpdateMovieExecute, UpdateMovieCanExecute); // Binding update movie to button
			UpdateNote = new RelayCommand(UpdateNoteExecute, UpdateNoteCanExecute); // binding update note to button 
			DelMovie = new RelayCommand(DelMovieExecute, DelMovieCanExecute); // binding to add note button
			Login = new RelayCommand(LoginExecute, LoginCanExecute); // binding to login
			Disconnect = new RelayCommand(DisconnectExecute); // binding to disconnect
			Register = new RelayCommand(RegisterExecute, RegisterCanExecute); // binding to register
			ClosingCommand = new RelayCommand<CancelEventArgs>(ClosingWindow); // register closing event
			NoteGen = new RelayCommand(NoteGenExecute, NoteGenCanExecute); // Movie gen button of mainview (button add new note)
			MovieGen = new RelayCommand(MovieGenExecute); // Movie gen button of mainview 
			DataButton = new RelayCommand(DataButtonExecute, DataButtonCanExecute); // DataButton of DataGenerator view
		}

		// CurrentMovie prop
		private Movie currentMovie;
		public Movie CurrentMovie
		{
			get
			{
				return currentMovie;
			}
			set
			{
				currentMovie = value;
				RaisePropertyChanged();
				RefreshNotes();
			}
		}

		// the filter for the ComboBox : title has tocontain the typed value else if empty reset CurrentMovie
		private String comboTextFilter;
		public String ComboTextFilter
		{
			get { return comboTextFilter; }
			set
			{
				comboTextFilter = value;
				var tmp = new List<Movie>();
				if (currentMovie != null)
					if (CurrentMovie.Title == value && filteredMovies != movies)
					{
						FilteredMovies = movies;
						return;
					}
				if (value != "")
				{
					foreach (var f in movies)
					{
						if (f.Title.ToLower().Contains(value.ToLower()))
						tmp.Add(f);
					}
					FilteredMovies = tmp;
				}
				else
				{
					FilteredMovies = movies;
					CurrentMovie = null;
				}
			}
		}
		// prop used for comboboxTextFilter is a list of movies from original and filter is applied to it
		private List<Movie> filteredMovies;
		public List<Movie> FilteredMovies
		{
			get { return filteredMovies; }
			set
			{
				filteredMovies = value;
				RaisePropertyChanged();
			}
		}
		// original list of all movies
		private List<Movie> movies;
		public List<Movie> Movies
		{
			get
			{
				return movies;
			}
			set
			{
				movies = value;
				RaisePropertyChanged();
			}
		}
		// refresh of list of movies
		private void RefreshMovies()
		{
			FilteredMovies = Movies = msc.GetAllMoviesAsync().Result.ToList();
		}
		public RelayCommand UpdateMovie { get; }
		
		// Update movie with current movie data
		void UpdateMovieExecute()
		{
			Movie mov = msc.UpdateMovieAsync(this.CurrentMovie.Id, this.CurrentMovie.Title, this.CurrentMovie.Genre, this.CurrentMovie.Summary).Result;
		}
		// check if current movie is null
		bool UpdateMovieCanExecute()
		{
			return currentMovie != null;
		}
		// property current user has login and password, only owner can modify note
		private User currentUser;
		public User CurrentUser
		{
			get
			{
				return currentUser;
			}
			set
			{
				currentUser = value;
				RaisePropertyChanged();
			}
		}
		// prop on the left side of login page 
		private String logLogin;
		public String LogLogin
		{
			get
			{
				 return logLogin;
			}
			set
			{
				logLogin = value;
				RaisePropertyChanged();
			}
		}
		// prop on the left side of login page 
		private String logPassword;
		public String LogPassword
		{
			get
			{
				return logPassword;
			}
			set
			{
				logPassword = value;
				RaisePropertyChanged();
			}
		}
		public RelayCommand Login { get; }
		// when button log in is pressed register the login view and hide it, open mainview and set the datacontext
		void LoginExecute()
		{
			if ((CurrentUser = usc.LoginUser(LogLogin, LogPassword)) == null)
				MessageBox.Show("Invalid User and Password");
			else
			{
				loginView = (LoginWindow)App.Current.MainWindow;
				loginView.Hide();
				mainView = new MainWindow
				{
					DataContext = this,
				};
				mainView.ShowDialog();
			}
		}
		// check if left side login is null
		private bool LoginCanExecute()
		{
			return LogLogin != null;
		}
		//prop on right side register login
		private String regLogin;
		public String RegLogin
		{
			get
			{
				return regLogin;
			}
			set
			{
				regLogin = value;
				RaisePropertyChanged();
			}
		}
		// prop on right side register password
		private String regPassword;
		public String RegPassword
		{
			get
			{
				return regPassword;
			}
			set
			{
				regPassword = value;
				RaisePropertyChanged();
			}
		}

		public RelayCommand Register { get; }
		// create a new user and check if login and password is filled or a msg box will pop
		void RegisterExecute()
		{
			if (RegPassword != "")
			{
				User user = usc.CreateUser(RegLogin, RegPassword);
				if (user != null)
					MessageBox.Show("Your user has been created");
				else
					MessageBox.Show("User already exist");
			}
			else
				MessageBox.Show("Both login and password has to be filled");
		}
		// Check if login is null
		bool RegisterCanExecute()
		{
			return RegLogin != null;
		}
		// list of note to be showed for the movies 
		private List<CustNote> notes;
		public List<CustNote> Notes
		{
			get
			{
				return notes;
			}
			set
			{
				notes = value;
				RaisePropertyChanged();
			}
		}
		// prop currently selected note
		private CustNote currentNote;
		public CustNote CurrentNote
		{
			get
			{
				return currentNote;
			}
			set
			{
				currentNote = value;
				if (currentNote != null)
					CheckIfCreator();
				RaisePropertyChanged();
			}
		}
		private bool noteUpdateReadOnly;
		public bool NoteUpdateReadOnly
		{
			get
			{
				return noteUpdateReadOnly;
			}
			set
			{
				noteUpdateReadOnly = value;
				RaisePropertyChanged();
			}
		}
		// check if currently logged user is the creator of the note so he can modify or not
		private bool CheckIfCreator()
		{
			var mynote = nsc.GetNote(currentNote.Id);
			if (mynote.UserEntity_Id == currentUser.Id)
			{
				NoteUpdateReadOnly = false;
				return true;
			}
			NoteUpdateReadOnly = true;
			return false;
		}
		public RelayCommand UpdateNote { get; }
		//update the current note
		private void UpdateNoteExecute()
		{
			nsc.UpdateNoteAsync(currentNote.Id, currentNote.Rating, currentNote.Comment);
		}
		// see if is creator and a note is selected
		private bool UpdateNoteCanExecute()
		{
			return currentNote != null && CheckIfCreator();
		}

		public RelayCommand Disconnect { get; }
		// close the windows
		private void DisconnectExecute()
		{
			mainView.Close();
		}
		// prop noteAverage contain the average of notes
		private String noteAverage;
		public String NoteAverage
		{
			get
			{
				return noteAverage;
			}
			set
			{
				noteAverage = value;
				RaisePropertyChanged();
			}
		}

		public RelayCommand DelMovie { get; }
		// see if current modify is selected
		private bool DelMovieCanExecute()
		{
			return currentMovie != null;
		}
		// delete movie, has a confirmation window , will delete related note
		private void DelMovieExecute()
		{
			var dialogResult = MessageBox.Show("This will delete movie and all related rating", "Confirmation window", MessageBoxButton.YesNo);
			if (dialogResult == MessageBoxResult.Yes)
			{
				msc.DeleteMovieAsync(currentMovie.Id);
				RefreshMovies();
			}
		}
		// Refresh the note of current movie, calculate the noteAverage, is called when CurrentMovie setter is called.
		private void RefreshNotes()
		{
			if (currentMovie != null)
			{
				List<CustNote> notes = new List<CustNote>();
				foreach (var n in nsc.FindNotesOfMovieAsync(CurrentMovie.Id).Result.ToList())
				{
					notes.Add(new CustNote() { Rating = n.Rating, Comment = n.Comment, UserId = n.UserEntity_Id, Id = n.Id });
				}
				if (notes.Count > 0)
				{
					NoteAverage = String.Format("{0:0.0}", notes.Average(x => x.Rating)) + " / 20";
					foreach (var u in notes)
					{
						u.User = usc.GetUser(u.UserId).Login;
					}
				}
				else
					NoteAverage = "No rating yet, be the first to rate this movie !";
				Notes = notes;
				RaisePropertyChanged("Notes");
			}
			else
				NoteAverage = "";
		}

		public RelayCommand<CancelEventArgs> ClosingCommand { get; private set; }
		// when main view is closed actions show previous login and remove the datas. Is used as to close all when clicking the closing cross on mainwindow
		private void ClosingWindow(CancelEventArgs obj)
		{
			loginView.Show();
			ResetLoginDatas();
		}

		//Remove login datas 
		private void ResetLoginDatas()
		{
			LogLogin = String.Empty;
			LogPassword = String.Empty;
			RegLogin = String.Empty;
			RegPassword = String.Empty;
		}

		// string for the button on dataCreation window
		private String buttonContent;
		public String ButtonContent 
		{
			get
			{
				return buttonContent;
			}
			set
			{
				buttonContent = value;
				RaisePropertyChanged();
			}
		}

		public RelayCommand NoteGen { get; }
		// is used when add note is used. This will set the textbox and textblock values 
		private void NoteGenExecute()
		{
			currentView = new DataCreation
			{
				DataContext = this,
			};
			ButtonContent = "Create Note";
			TBlock = "Comment";
			TBlock1 = "Rating";
			TBox2Visibility = "Hidden";
			TBox2ratingVisibility = "Visible";
			TBlock2 = String.Empty;
			RaisePropertyChanged();
			currentView.ShowDialog();
		}
		// check if a movie is selected
		private bool NoteGenCanExecute()
		{
			return currentMovie != null;
		}

		public RelayCommand MovieGen { get; }
		// is used when createmovie is used, this will set the textbox and textblock values.
		private void MovieGenExecute()
		{
			currentView = new DataCreation
			{
				DataContext = this
			};
			ButtonContent = "Create Movie";
			TBlock = "Title";
			TBlock1 = "Genre";
			TBlock2 = "Summary";
			TBox2Visibility = "Visible";
			TBox2ratingVisibility = "Hidden";
			RaisePropertyChanged();
			currentView.ShowDialog();
		}
		//prop for visibility for 2nd row textbox 
		public String TBox2Visibility{ get; set; }
		public String TBox2ratingVisibility { get; set; }

		public RelayCommand DataButton { get; }
		// the button in datacreation different execution for different buttonContent value
		private void DataButtonExecute()
		{
			if (buttonContent == "Create Movie")
			{
				msc.CreateMovie(TBox, TBox1, TBox2);
				RefreshMovies();
				CurrentMovie = movies.Last();
			}
			if (buttonContent == "Create Note")
			{
				nsc.CreateNote(TBox2rating, TBox, currentUser.Id, currentMovie.Id);
				RefreshNotes();
			}
			TBox = String.Empty;
			TBox1 = String.Empty;
			TBox2 = String.Empty;
			TBox2rating = 0;
			currentView.Close();
		}
		//check if we can use button
		private bool DataButtonCanExecute()
		{
			if (buttonContent == "Create Movie")
			{
				return TBox != null && TBox1 != null;
			}

			if (buttonContent == "Create Note" && TBox != null)
			{
				return  Enumerable.Range(0, 21).Contains(TBox2rating);
			}
			return false;
		}

		
		// prop for dataCreation tbox
		public String TBox { get; set; }
		public String TBox1 { get; set; }
		public String TBox2 { get; set; }
		public int TBox2rating { get; set; }
		// prop for dataCreation tblock
		public String TBlock { get; set; }
		public String TBlock1 { get; set; }
		public String TBlock2 { get; set; }


		// custom note model, is implemented because datagrid item source cannot be from 2 sources so we gather 2 in 1.
		// Id rating comment are from note
		// User , UserId are from user
		public class CustNote
		{
			public int Id { get; set; }
			public int  Rating{ get; set; }
			public String Comment{ get; set; }
			public String User{ get; set; }
			public int UserId { get; set; }
		}
	}
}
