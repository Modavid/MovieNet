using MovieNetLibrary;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;

namespace MovieNetWCF
{
	// REMARQUE : vous pouvez utiliser la commande Renommer du menu Refactoriser pour changer le nom de classe "Service1" à la fois dans le code et le fichier de configuration.
	public class UserService : IUserService
	{
		public static List<UserEntity> GetAll()
		{
			DataModelContainer ctx = new DataModelContainer();
			return ctx.UserEntitySet.ToList();
		}
		public User GetUser(int id)
		{
					
			DataModelContainer ctx = new DataModelContainer();
			var userEntity = (from u in ctx.UserEntitySet where u.Id == id select u).FirstOrDefault();
			if (userEntity != null)
				return TranslateUser(userEntity);
			else
				throw new Exception("Invalid user id");
		}
		public User CreateUser(string login, string password)
		{
			DataModelContainer ctx = new DataModelContainer();
			int count = (from u in ctx.UserEntitySet where u.Login == login && u.Password == password select u).Count();
			if (count > 0)
				new Exception("User already exist");
			UserEntity user = new UserEntity
			{
				Login = login,
				Password = password
			};
			ctx.UserEntitySet.Add(user);
			ctx.SaveChanges();
			return TranslateUser(user);
		}

		public User UpdateUser(int id, string login, string password)
		{
			DataModelContainer ctx = new DataModelContainer();
			UserEntity userEntity = (from u in ctx.UserEntitySet where u.Id == id select u).FirstOrDefault();

			if (userEntity == null)
				return null;
			userEntity.Login = login;
			userEntity.Password = password;
			ctx.SaveChanges();
			return TranslateUser(userEntity);
		}

		public Boolean DeleteUser(int id)
		{
			DataModelContainer ctx = new DataModelContainer();
			var userEntity = (from u in ctx.UserEntitySet where u.Id == id select u).FirstOrDefault();
			if (userEntity == null)
				return false;
			ctx.UserEntitySet.Remove(userEntity);
			ctx.SaveChanges();
			return true;
		}

		public User LoginUser (string login, string password)
		{
			DataModelContainer ctx = new DataModelContainer();
			var user = (from u in ctx.UserEntitySet where u.Login == login && u.Password == password select u).Single();
			if (user != null)
				return TranslateUser(user);
			return null;
		}
		private User TranslateUser(UserEntity userEntity)
		{
			User user = new User
			{
				Id = userEntity.Id,
				Login = userEntity.Login,
				Password = userEntity.Password
			};
			return user;
		}

		public UserEntity ReverseTranslateUser(User user)
		{
			UserEntity userEntity = new UserEntity
			{
				Id = user.Id,
				Login = user.Login,
				Password = user.Password
			};
			return userEntity;
		}
	}
}
