using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using System.Windows;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.CommandWpf;
using MovieNetWPF.WCFMovieService;
using MovieNetWPF.WCFNoteService;
using MovieNetWPF.WCFUserService;

namespace MovieNetWPF
{
	public class MainViewModel : ViewModelBase
	{
		private MovieServiceClient msc = new MovieServiceClient();
		private NoteServiceClient nsc = new NoteServiceClient();
		private UserServiceClient usc = new UserServiceClient();
		LoginWindow loginView;
		MainWindow mainView;
		Window currentView;
		public MainViewModel()
		{
			RefreshMovies(); // init of movies list
			UpdateMovie = new RelayCommand(UpdateMovieExecute, UpdateMovieCanExecute); // Binding update movie to button
			AddNote = new RelayCommand(AddNoteExecute, AddNoteCanExecute); // binding to add note button
			Login = new RelayCommand(LoginExecute, LoginCanExecute); // binding to login
			Register = new RelayCommand(RegisterExecute, RegisterCanExecute); // binding to register
			ClosingCommand = new RelayCommand<CancelEventArgs>(ClosingWindow); // register closing event
			NoteGen = new RelayCommand(NoteGenExecute); // Movie gen button of mainview 
			MovieGen = new RelayCommand(MovieGenExecute); // Movie gen button of mainview 
			DataButton = new RelayCommand(DataButtonExecute, DataButtonCanExecute); // DataButton of DataGenerator view
			Note = new Note();
		}


		// Movie prop, functions UpdateMovie,

		private Movie currentMovie;
		public Movie CurrentMovie
		{
			get
			{
				return currentMovie;
			}
			set
			{
				currentMovie = value;
				RaisePropertyChanged();
				RefreshNotes();
			}
		}
		// list of movies, is created in ctor and updated when a movie is modified or added
		private List<Movie> movies;
		public List<Movie> Movies
		{
			get
			{
				return movies;
			}
			set
			{
				movies = value;
				RaisePropertyChanged();
			}
		}
		// refresh of list of movies
		private void RefreshMovies()
		{
			Movies = msc.GetAllMoviesAsync().Result.ToList();
		}

		private Movie newMovie;
		public Movie NewMovie
		{
			get
			{
				return newMovie;
			}
			set
			{
				newMovie = value;
				RaisePropertyChanged();
			}
		}
		
		public RelayCommand CreateMovie { get; }
		// create a movie
		void CreateMovieExecute()
		{
			Movie mov = msc.CreateMovieAsync(newMovie.Title, newMovie.Genre, newMovie.Summary).Result;
			RefreshMovies();
		}

		bool CreateMovieCanExecute()
		{
			return newMovie != null;
		}

		public RelayCommand UpdateMovie { get; }
		// Update movie with current movie data
		void UpdateMovieExecute()
		{
			Movie mov = msc.UpdateMovieAsync(this.CurrentMovie.Id, this.CurrentMovie.Title, this.CurrentMovie.Genre, this.CurrentMovie.Summary).Result;
		}
		// check if current movie is null
		bool UpdateMovieCanExecute()
		{
			return currentMovie != null;
		}

		// user prop, functions 
		// property current user
		private User currentUser;
		public User CurrentUser
		{
			get
			{
				return currentUser;
			}
			set
			{
				currentUser = value;
				RaisePropertyChanged();
			}
		}

		// Login functions
		// property login login 
		private String logLogin;
		public String LogLogin
		{
			get
			{
				 return logLogin;
			}
			set
			{
				logLogin = value;
				RaisePropertyChanged();
			}
		}
		// property login password
		private String logPassword;
		public String LogPassword
		{
			get
			{
				return logPassword;
			}
			set
			{
				logPassword = value;
				RaisePropertyChanged();
			}
		}

		public RelayCommand Login { get; }
		// when button log in is pressed register the login view and hide it, open mainview and set the datacontext
		void LoginExecute()
		{
			loginView = (LoginWindow)App.Current.MainWindow;
			loginView.Hide();
			currentUser = usc.LoginUser(LogLogin, LogPassword);
			mainView = new MainWindow
			{
				DataContext = this,
			};
			mainView.ShowDialog();
		}
		// check if login password & login are null
		private bool LoginCanExecute()
		{
			return LogPassword != null && LogLogin != null;
		}

		// register functions
		//property register login
		private String regLogin;
		public String RegLogin
		{
			get
			{
				return regLogin;
			}
			set
			{
				regLogin = value;
				RaisePropertyChanged();
			}
		}
		// property register password
		private String regPassword;
		public String RegPassword
		{
			get
			{
				return regPassword;
			}
			set
			{
				regPassword = value;
				RaisePropertyChanged();
			}
		}

		public RelayCommand Register { get; }
		// create a new user
		void RegisterExecute()
		{
			usc.CreateUser(RegLogin,RegPassword);
		}
		// Check if login & password are null
		bool RegisterCanExecute()
		{
			return RegPassword != null && RegLogin != null;
		}

		// Note function, prop, ClearNote, AddNote, Refresh
		// list of note to be showed for the movies
		private List<Note> notes;
		public List<Note> Notes
		{
			get
			{
				return notes;
			}
			set
			{
				notes = value;
				RaisePropertyChanged();
			}
		}
		// Refresh the note of current movie , is called when CurrentMovie setter is called.
		private void RefreshNotes()
		{
			Notes = nsc.FindNotesOfMovieAsync(CurrentMovie.Id).Result.ToList();
		}
		// property rating
		private int rating;
		public int Rating
		{
			get
			{
				return rating;
			}
			set
			{
				rating = value;
				Note.Rating = rating;
				RaisePropertyChanged();
			}
		}
		// property comment
		private String comment;
		public String Comment
		{
			get
			{
				return comment;
			}
			set
			{
				comment = value;
				Note.Comment = comment;
				RaisePropertyChanged();
			}
		}
		// property note
		private Note note;
		public Note Note
		{
			get
			{
				return note;
			}
			set
			{
				note = value;
				RaisePropertyChanged();
			}
		}
		// create a new instance of note
		void ClearNote()
		{
			Note = new Note();
		}

		public RelayCommand AddNote { get; }
		// create new note and refresh note synchronously
		void AddNoteExecute()
		{
			nsc.CreateNote(Note.Rating, Note.Comment, CurrentUser.Id, CurrentMovie.Id);
			RefreshNotes();
		}
		// check if comment is not null, rating between 0 and 20 and current movie not null
		bool AddNoteCanExecute()
		{
			return Comment != null && Enumerable.Range(0,21).Contains(Rating) && currentMovie != null;
		}

		//login windows function : closing and reopening when mainwindows is closed

		public RelayCommand<CancelEventArgs> ClosingCommand { get; private set; }
		// when main view is closed actions show previous login and remove the datas
		private void ClosingWindow(CancelEventArgs obj)
		{
			loginView.Show();
			ResetLoginDatas();
		}

		//to modify to make cleaner
		private void ResetLoginDatas()
		{
			LogLogin = "";
			LogPassword = "";
			RegLogin = "";
			regPassword = "";
		}

		// Data Creation Section (movie and note)

		private String buttonContent;
		public String ButtonContent 
		{
			get
			{
				return buttonContent;
			}
			set
			{
				buttonContent = value;
				RaisePropertyChanged();
			}
		}

		public RelayCommand NoteGen { get; }
		private void NoteGenExecute()
		{
			currentView = new DataCreation
			{
				DataContext = this,
			};
			ButtonContent = "Create Note";
			TBlock = "Comment";
			TBlock1 = "Rating";
			TBox2Visibility = "Hidden";
			RaisePropertyChanged();
			currentView.ShowDialog();
		}

		public RelayCommand MovieGen { get; }
		
		private void MovieGenExecute()
		{
			currentView = new DataCreation
			{
				DataContext = this
			};
			ButtonContent = "Create Movie";
			TBlock = "Title";
			TBlock1 = "Genre";
			TBlock2 = "Summary";
			TBox2Visibility = "Visible";
			RaisePropertyChanged();
			currentView.ShowDialog();
		}

		public String TBox2Visibility{ get; set; }
		public RelayCommand DataButton { get; }

		private bool DataButtonCanExecute()
		{
			if (buttonContent == "Create Movie")
			{
				return TBox != null && TBox1 != null && TBox2 != null;
			}

			if (buttonContent == "Create Note" && TBox1 != null)
			{
				return TBox != null && Enumerable.Range(0, 21).Contains(int.Parse(TBox1));
			}
			return false;
		}

		private void DataButtonExecute()
		{
			if (buttonContent == "Create Movie")
			{
				msc.CreateMovie(TBox, TBox1, TBox2);
				RefreshMovies();
			}
			if (buttonContent == "Create Note")
			{
				nsc.CreateNote(int.Parse(TBox1), TBox,currentUser.Id,currentMovie.Id);
				RefreshNotes();
			}
			currentView.Close();
		}

		public String TBox { get; set; }
		public String TBox1 { get; set; }
		public String TBox2 { get; set; }

		public String TBlock { get; set; }
		public String TBlock1 { get; set; }
		public String TBlock2 { get; set; }

		
	}
}
