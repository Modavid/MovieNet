using MovieNetLibrary;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;

namespace MovieNetWCF
{
	// REMARQUE : vous pouvez utiliser la commande Renommer du menu Refactoriser pour changer le nom de classe "Service1" à la fois dans le code et le fichier de configuration.
	public class NoteService : INoteService
	{
		public Note GetNote(int id)
		{
            NoteEntity notesEntity = null;

            try
            {
                DataModelContainer ctx = new DataModelContainer();
                notesEntity = (from m in ctx.NoteEntitySet where m.Id == id select m).FirstOrDefault();
                if (notesEntity == null)
                    throw new Exception("Cannot find note with this id");
            }
            catch (SqlException ex)
            {
                for (int i = 0; i < ex.Errors.Count; i++)
                {
                    throw new Exception("Index #" + i + "\n" +
                        "Message: " + ex.Errors[i].Message + "\n" +
                        "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                        "Source: " + ex.Errors[i].Source + "\n" +
                        "Procedure: " + ex.Errors[i].Procedure + "\n");
                }
            }

            return TranslateNote(notesEntity);
        }
		public Note CreateNote(int rating, string comment, int idUser, int idMovie)
		{
            NoteEntity note = null;

            try
            {
                DataModelContainer ctx = new DataModelContainer();
                MovieService ms = new MovieService();
                UserService us = new UserService();
                var msq = (from m in ctx.MovieEntitySet where m.Id == idMovie select m).FirstOrDefault();
                var usq = (from u in ctx.UserEntitySet where u.Id == idUser select u).FirstOrDefault();
                note = new NoteEntity
                {
                    Rating = rating,
                    Comment = comment,
                    MovieEntity = msq,
                    UserEntity = usq
                };

                ctx.NoteEntitySet.Add(note);
                ctx.SaveChanges();
            }
            catch (SqlException ex)
            {
                for (int i = 0; i < ex.Errors.Count; i++)
                {
                    throw new Exception("Index #" + i + "\n" +
                        "Message: " + ex.Errors[i].Message + "\n" +
                        "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                        "Source: " + ex.Errors[i].Source + "\n" +
                        "Procedure: " + ex.Errors[i].Procedure + "\n");
                }
            }

			return TranslateNote(note);
		}

		public Note UpdateNote(int id,int rating)
		{
            NoteEntity notesEntity = null;

            try
            {
                DataModelContainer ctx = new DataModelContainer();
                notesEntity = (from m in ctx.NoteEntitySet where m.Id == id select m).FirstOrDefault();
                if (notesEntity == null)
                    throw new Exception("Cannot find note with this id");

                notesEntity.Rating = rating;
                ctx.SaveChanges();
            }
            catch (SqlException ex)
            {
                for (int i = 0; i < ex.Errors.Count; i++)
                {
                    throw new Exception("Index #" + i + "\n" +
                        "Message: " + ex.Errors[i].Message + "\n" +
                        "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                        "Source: " + ex.Errors[i].Source + "\n" +
                        "Procedure: " + ex.Errors[i].Procedure + "\n");
                }
            }

			return TranslateNote(notesEntity);
		}

		public Boolean DeleteNote(int id)
		{
            try
            {
                DataModelContainer ctx = new DataModelContainer();

                var notesEntity = (from m in ctx.NoteEntitySet where m.Id == id select m).FirstOrDefault();
                if (notesEntity == null)
                    throw new Exception("Cannot find note with this id");

                ctx.NoteEntitySet.Remove(notesEntity);
                ctx.SaveChanges();
            }
            catch (SqlException ex)
            {
                for (int i = 0; i < ex.Errors.Count; i++)
                {
                    throw new Exception("Index #" + i + "\n" +
                        "Message: " + ex.Errors[i].Message + "\n" +
                        "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                        "Source: " + ex.Errors[i].Source + "\n" +
                        "Procedure: " + ex.Errors[i].Procedure + "\n");
                }
            }

			return true;
		}

		public List<Note> FindNotesOfMovie(int idMovie)
		{
            List<Note> notes = new List<Note>();

            try
            {
                DataModelContainer ctx = new DataModelContainer();

                var query = (from n in ctx.NoteEntitySet where n.MovieEntity.Id == idMovie select n).ToList();
                List<NoteEntity> list = query.ToList();

                foreach (var note in list)
                {
                    notes.Add(TranslateNote(note));
                }
            }
            catch (SqlException ex)
            {
                for (int i = 0; i < ex.Errors.Count; i++)
                {
                    throw new Exception("Index #" + i + "\n" +
                        "Message: " + ex.Errors[i].Message + "\n" +
                        "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                        "Source: " + ex.Errors[i].Source + "\n" +
                        "Procedure: " + ex.Errors[i].Procedure + "\n");
                }
            }

			return notes;
		}

		private Note TranslateNote(NoteEntity notesEntity)
		{
			MovieService ms = new MovieService();

			Note note = new Note
			{
				Id = notesEntity.Id,
				Rating = notesEntity.Rating,
				Comment = notesEntity.Comment,
				MovieEntity_Id = notesEntity.MovieEntity.Id,
				UserEntity_Id = notesEntity.UserEntity.Id
			};
			return note;
		}

		internal NoteEntity ReverseTranslateNote(Note note)
		{
			DataModelContainer ctx = new DataModelContainer();

			MovieService ms = new MovieService();
			UserService us = new UserService();

			var usq = (from u in ctx.UserEntitySet where u.Id == note.UserEntity_Id select u).FirstOrDefault();
			var msq = (from m in ctx.MovieEntitySet where m.Id == note.MovieEntity_Id select m).FirstOrDefault();
			NoteEntity noteEntity = new NoteEntity
			{
				Id = note.Id,
				Comment = note.Comment,
				Rating = note.Rating,
				UserEntity = usq,
				MovieEntity = msq
			};
			return noteEntity;
		}

	}
}
